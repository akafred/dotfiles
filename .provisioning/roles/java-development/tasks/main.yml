- name: make adoptopenjdk available
  homebrew_tap:
    name: AdoptOpenJDK/openjdk

- name: install Javas
  package:
    name: "{{ item }}"
  ignore_errors: yes
  with_items:
#    - java6
    - adoptopenjdk/openjdk/adoptopenjdk8
    - adoptopenjdk11
    - java
  when: ansible_system == 'Darwin'

- name: make latest java visible
  become: true
  file:
    src: /usr/local/opt/openjdk/libexec/openjdk.jdk
    dest: /Library/Java/JavaVirtualMachines/openjdk.jdk
    state: link


#- name: Check if sdkman is installed
#  shell: "test -d \"{{ ansible_env.HOME }}/.sdkman\" && echo \"yes\" || echo \"no\""
#  register: is_sdkman_installed

#- name: Install SDKMAN!
#  when: is_sdkman_installed.stdout == "no"
#  shell: curl -s "https://get.sdkman.io" | bash executable=/bin/bash

#- name: Ensure presence of bashrc
#  file: state=touch path={{ ansible_env.HOME }}/.bashrc

#- name: Add sdkman in .bashrc
#  lineinfile: dest={{ ansible_env.HOME }}/.bashrc regexp="\/.sdkman/bin\/sdkman\-init\.sh" line='[[ -s "{{ ansible_env.HOME }}/.sdkman/bin/sdkman-init.sh" && ! $(which sdkman-init.sh) ]] && source "{{ ansible_env.HOME }}/.sdkman/bin/sdkman-init.sh"'

- name: Installing maven (have issues with mvn under sdkman)
  homebrew:
    name: maven
  when: ansible_system == 'Darwin'

- name: Installing gradle
  homebrew:
    name: gradle
  when: ansible_system == 'Darwin'

- name: create m2 folder
  file:
    path: "{{ ansible_env.HOME }}/.m2"
    state: directory
    owner: "{{ ansible_env.USER }}"
    mode: 0755

- name: create mvn settings bin-folder
  file:
    path: "{{ ansible_env.HOME }}/.m2/bin"
    state: directory
    mode: 0755

#- name: Unalias maven-wrapper
#  blockinfile:
#      dest: "{{ ansible_env.HOME }}/.paths_homes_etc"
#      marker: "# {mark} ANSIBLE MANAGED BLOCK for unaliasing sdkman mvn command"
#      content: |
#               unalias mvn || true

- name: use my smart mvn command
  copy: >
    src={{ item.name }}
    dest="{{ ansible_env.HOME }}/{{ item.name }}"
    mode="{{ item.mode }}"
    owner="{{ ansible_env.USER }}"
  with_items:
    - { name: ".m2/bin/mvn", mode: 'u=rwx,g=rx,o=r' }
    - { name: ".m2/default-settings.xml", mode: 'u=rw,g=r,o=' }
    # - { name: ".m2/something-settings.xml", mode: 'u=rw,g=r,o=' }

- name: override mvn command
  lineinfile: >
    dest={{ ansible_env.HOME }}/.paths_homes_etc
    line='PATH={{ ansible_env.HOME }}/.m2/bin:$PATH'
    regexp='PATH={{ ansible_env.HOME }}\/\.m2/bin:\$PATH'

- name: add java_ls and java_use commands
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.paths_homes_etc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK for java commands"
    content: |
             alias java_ls='/usr/libexec/java_home -V 2>&1 |grep -E "^\s+\d\d?(?:(?:.\d+)?.\d+[,_]?(?:.\d+))?\s" | cut -d "(" -f 1 | sed -e "s/^[[:space:]]*//"'
             function java_use() {
                 # unset introduced to avoid Big Sur-bug https://developer.apple.com/forums/thread/666681
                 unset JAVA_HOME
                 export JAVA_HOME=$(/usr/libexec/java_home -v "$1")
                 export PATH=$JAVA_HOME/bin:$PATH
                 java -version
             }
  when: ansible_system == 'Darwin'

- name: set default java
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.paths_homes_etc"
    insertafter: EOF
    line: "java_use 11"
    regexp: "^java_use"
  when: ansible_system == 'Darwin'
